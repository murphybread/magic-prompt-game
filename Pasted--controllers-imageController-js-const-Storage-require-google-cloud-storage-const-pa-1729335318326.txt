// controllers/imageController.js

const { Storage } = require("@google-cloud/storage");
const path = require('path');
const axios = require('axios');


// Google Cloud Storage Client Setting
const storage = new Storage({
    keyFilename: path.join(__dirname, '..', process.env.GCS_KEY_FILE_PATH)  // JSON File Path of Google Cloud Storage service user

});

const bucketName = process.env.GCS_BUCKET_NAME;  // GCS Bucket name

// Image Download and Upload to GCS
const downloadAndUploadImage = async (imageUrl, prompt) => {
    try {

        // Image Download
        const response = await axios({
            method: 'GET',
            url: imageUrl,
            responseType: 'stream',
        });

        // Content-Type Validation
        const contentType = response.headers['content-type'];
        if (!contentType.startsWith('image/')) {
            throw new Error('This url is not Image file');
        }

        // File Extension Extraction
        const extension = contentType.split('/')[1].split(';')[0]; // 예: 'image/jpeg' -> 'jpeg'
        console.log("content: ", contentType);

        // Unique File Name Creation by Prompt
        const filename = `${prompt}.${extension}`;
        const storagePath = `images/${filename}`;

        // GCS Bucket Object Creation
        const bucket = storage.bucket(bucketName);
        const file = bucket.file(storagePath);

        // Upload Image Stream to GCS
        const stream = response.data.pipe(
            file.createWriteStream({
                metadata: {
                    contentType: contentType,
                },
            })
        );

        // Create Public URL after Upload
        return new Promise((resolve, reject) => {
            stream.on('finish', async () => {
                try {
                    // 파일을 공개적으로 설정
                    await file.makePublic();
                    const publicUrl = `https://storage.googleapis.com/${bucket.name}/${file.name}`;
                    resolve(publicUrl);
                } catch (err) {
                    reject(err);
                }
            });

            stream.on('error', (err) => {
                reject(err);
            });
        });
    } catch (error) {
        console.error('Image Download and Upload Error:', error.message);
        throw error;
    }
};

module.exports = {
    downloadAndUploadImage,
};
